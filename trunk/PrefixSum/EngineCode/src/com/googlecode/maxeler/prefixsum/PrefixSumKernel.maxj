package com.googlecode.maxeler.prefixsum;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

public class PrefixSumKernel extends Kernel {
	final DFEType TYPE_UINT32 = dfeUInt(32);
	final DFEType TYPE_INT32 = dfeInt(32);
	final DFEType TYPE_INT64 = dfeInt(64);

	protected PrefixSumKernel(KernelParameters parameters) {
		super(parameters);

		DFEVar input = io.input("input", TYPE_INT64);
		DFEVar carriedSum = TYPE_INT64.newInstance(this);
		DFEVar index = control.count.simpleCounter(32);

		optimization.pushPipeliningFactor(0.0);
		DFEVar carry = index.eq(0) ? 0 : carriedSum;
		optimization.popPipeliningFactor();

		// calculate output
		DFEVar output = input + carry;

		// backward edge
		carriedSum <== stream.offset(output, -1);

		io.output("io", output, TYPE_INT64);
	}

}
